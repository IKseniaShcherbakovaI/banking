from unittest.mock import patch

import pandas as pd
import pytest

from src.views import greeting, currency_rates, price_stock, cards_dicts, top_transaction


@pytest.fixture
def coll():
    trans_1 = [{"Дата операции": "18.11.2021 21:15:27", "Дата платежа": "19.11.2021",
                "Номер карты": '*7197', "Статус": "OK", "Сумма операции": -200.0,
                "Валюта операции": "RUB", "Сумма платежа": -200.0, "Валюта платежа": "RUB",
                "Кэшбэк": 'None', "Категория": "Мобильная связь", "MCC": 'None',
                "Описание": "Тинькофф Мобайл ssss",
                "Бонусы (включая кэшбэк)": 2, "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 200.0},
               {"Дата операции": "18.11.2021 21:15:27",
                "Дата платежа": "19.11.2021", "Номер карты": '*5091',
                "Статус": "OK", "Сумма операции": 200.0, "Валюта операции": "RUB",
                "Сумма платежа": 200.0, "Валюта платежа": "RUB", "Кэшбэк": 'None',
                "Категория": "Пополнения", "MCC": 'None', "Описание": "Тинькофф Мобайл sss",
                "Бонусы (включая кэшбэк)": 0, "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 200.0}]

    return trans_1


@pytest.fixture
def coll2():
    trans_2 = [{"Дата операции": "18.11.2021 21:15:27", "Дата платежа": "19.11.2021",
                "Номер карты": '*7197', "Статус": "OK", "Сумма операции": -200.0,
                "Валюта операции": "RUB", "Сумма платежа": -200.0, "Валюта платежа": "RUB",
                "Кэшбэк": 'None', "Категория": "Мобильная связь", "MCC": 'None',
                "Описание": "Тинькофф Мобайл ssss",
                "Бонусы (включая кэшбэк)": 2, "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 200.0},
               {"Дата операции": "18.11.2021 21:15:27",
                "Дата платежа": "19.11.2021", "Номер карты": '*5091',
                "Статус": "OK", "Сумма операции": 200.0, "Валюта операции": "RUB",
                "Сумма платежа": 200.0, "Валюта платежа": "RUB", "Кэшбэк": 'None',
                "Категория": "Пополнения", "MCC": 'None', "Описание": "Тинькофф Мобайл sss",
                "Бонусы (включая кэшбэк)": 0, "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 200.0},
               {"Дата операции": "29.09.2021 18:48:24", "Дата платежа": "29.09.2021",
                "Номер карты": '*7197', "Статус": "OK", "Сумма операции": -100.0, "Валюта операции": "RUB",
                "Сумма платежа": -1330.0, "Валюта платежа": "RUB", "Кэшбэк": 'None',
                "Категория": "Мобильная связь", "MCC": 'None', "Описание": "Я МТС +7 921 11-22-33",
                "Бонусы (включая кэшбэк)": 1, "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 100.0},
                {"Дата операции": "29.09.2021 18:48:24", "Дата платежа": "29.09.2021",
                "Номер карты": '*7197', "Статус": "OK", "Сумма операции": -100.0, "Валюта операции": "RUB",
                "Сумма платежа": -100.0, "Валюта платежа": "RUB", "Кэшбэк": 'None',
                "Категория": "Мобильная связь", "MCC": 'None', "Описание": "Я МТС +7 921 11-22-33",
                "Бонусы (включая кэшбэк)": 1, "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 100.0},
               {"Дата операции": "29.09.2021 18:48:24", "Дата платежа": "29.09.2021",
                "Номер карты": '*7197', "Статус": "OK", "Сумма операции": -100.0, "Валюта операции": "RUB",
                "Сумма платежа": -120.0, "Валюта платежа": "RUB", "Кэшбэк": 'None',
                "Категория": "Мобильная связь", "MCC": 'None', "Описание": "Я МТС +7 921 11-22-33",
                "Бонусы (включая кэшбэк)": 1, "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 100.0},
                {"Дата операции": "29.09.2021 18:48:24", "Дата платежа": "29.09.2021",
                "Номер карты": '*7197', "Статус": "OK", "Сумма операции": -100.0, "Валюта операции": "RUB",
                "Сумма платежа": -1010.0, "Валюта платежа": "RUB", "Кэшбэк": 'None',
                "Категория": "Мобильная связь", "MCC": 'None', "Описание": "Я МТС +7 921 11-22-33",
                "Бонусы (включая кэшбэк)": 1, "Округление на инвесткопилку": 0,
                "Сумма операции с округлением": 100.0}]
    return pd.DataFrame(trans_2)



def test_top_transaction(coll2):
    assert top_transaction(coll2) == [{'amount': -1330.0,
                                       'category': 'Мобильная связь',
                                       'date': '29.09.2021',
                                       'description': 'Я МТС +7 921 11-22-33'},
                                      {'amount': -1010.0,
                                       'category': 'Мобильная связь',
                                       'date': '29.09.2021',
                                       'description': 'Я МТС +7 921 11-22-33'},
                                      {'amount': -200.0,
                                       'category': 'Мобильная связь',
                                       'date': '18.11.2021',
                                       'description': 'Тинькофф Мобайл ssss'},
                                      {'amount': -120.0,
                                       'category': 'Мобильная связь',
                                       'date': '29.09.2021',
                                       'description': 'Я МТС +7 921 11-22-33'},
                                      {'amount': -100.0,
                                       'category': 'Мобильная связь',
                                       'date': '29.09.2021',
                                       'description': 'Я МТС +7 921 11-22-33'}]
def test_cards_dicts(coll):
    result = cards_dicts(coll)

    assert result[0] == {'last_digits': '7197', 'cashback': 2.0, 'total_spent': 200.0}
    assert result[1] == {'last_digits': '5091', 'cashback': 0.0, 'total_spent': 0.0}


def test_greeting():
    assert greeting() == "Добрый день" or 'Доброе утро' or 'Добрый вечер' or 'Доброй ночи'


@patch("requests.get")
def test_price_stock(mock_get):
    mock_get.return_value.json.return_value = {"Global Quote": {"05. price": 210.00}}

    list_stocks = ["AAPL"]

    result = price_stock(list_stocks)
    expected = [
        {"stock": "AAPL", "price": 210.00},
        ]
    assert result == expected

